import requests
import logging
import aiohttp
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from bs4 import BeautifulSoup as soup




try:
    url = 'https://finca.tj/'

    headers = {'UserAgent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.136 YaBrowser/20.2.4.143 Yowser/2.5 Safari/537.36'}
    full_page = requests.get(url , headers = headers)
    html_page = soup(full_page.content, 'html.parser')

    rub = html_page.findAll('td', {})[2].text
    usd = html_page.findAll('td', {})[6].text
    eur = html_page.findAll('td', {})[10].text

    rub = float(rub)
    usd = round(float(usd), 2)
    eur = float(eur)

except requests.exceptions.ConnectionError:
    requests.status_code = "Connection refused"
    rub = '–í —Å–æ–µ–¥–∏–Ω–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ!'
    usd = '–í —Å–æ–µ–¥–∏–Ω–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ!'
    eur = '–í —Å–æ–µ–¥–∏–Ω–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ!'

TOKEN = '1925943055:AAHbhbEc17hcrhYIoBRb66N92Zu0B1iAc2Y'


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–ö—É—Ä—Å —Ä—É–±–ª—è ‚ÇΩ', '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ', '–ö—É—Ä—Å –µ–≤—Ä–æ üí∂', '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫']
    keyboard.add(*buttons)

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç  {message.from_user.first_name} !\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å \n–†—É–±–ª—è ‚ÇΩ\n–î–æ–ª–ª–∞—Ä–∞ üí≤\n–ï–≤—Ä–æ üí∂ !\n–ï—â—ë —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤', reply_markup=keyboard)


@dp.message_handler(Text(equals='–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫')) # –ú–æ–∂–Ω–æ –∏ —Ç–∞–∫ lambda message: message.text == "–ü–æ—Å–ª–∞—Ç—å"
async def process_dice_command(message: types.Message):
    await message.answer_dice(emoji="üé≤")

@dp.message_handler(Text(equals='–ö—É—Ä—Å —Ä—É–±–ª—è ‚ÇΩ'))
async def process_rub_command(message: types.Message):
    await message.answer(f'1 000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å (RUB) —Ä–∞–≤–Ω—è–µ—Ç—Å—è {rub * 1000} —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏ (TJS)')

@dp.message_handler(Text(equals='–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ'))
async def process_usd_command(message: types.Message):
    await message.answer(f'100 –¥–æ–ª–ª–∞—Ä –°–®–ê (USD) —Ä–∞–≤–Ω—è–µ—Ç—Å—è {usd * 100} —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏ (TJS)')

@dp.message_handler(Text(equals='–ö—É—Ä—Å –µ–≤—Ä–æ üí∂'))
async def process_eur_command(message: types.Message):
    await message.answer(f'100 –µ–≤—Ä–æ (EUR) —Ä–∞–≤–Ω—è–µ—Ç—Å—è {eur * 100} —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏ (TJS)')


if __name__ == '__main__':
    executor.start_polling(dp)